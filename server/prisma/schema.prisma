// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  ALUMNI
}

model Alumni {
  id                     Int       @id @default(autoincrement())
  fullName               String
  currentName            String?   // optional
  dateOfBirth            DateTime? // optional
  email                  String    @unique
  phoneNumber            String    @unique
  whatsappNumber         String?   // WhatsApp number
  secondaryPhoneNumber   String?   // Second phone number
  password               String?
  
  // Personal Information
  gender                 String?   // male, female, other, prefer_not_to_say
  profilePhoto           String?   // URL to profile photo
  
  // Address Information - Personal
  personalStreet         String?   // Personal street address
  personalCity           String?   // Personal city
  personalState          String?   // Personal state
  personalPincode        String?   // Personal PIN code
  personalCountry        String?   // Personal country
  
  // Address Information - Company/Work
  companyStreet          String?   // Company street address
  companyCity            String?   // Company city
  companyState           String?   // Company state
  companyPincode         String?   // Company PIN code
  companyCountry         String?   // Company country
  
  // Social Media Information
  linkedinProfile        String?   // LinkedIn URL
  instagramProfile       String?   // Instagram URL
  twitterProfile         String?   // Twitter/X URL
  facebookProfile        String?   // Facebook URL
  githubProfile          String?   // GitHub URL
  personalWebsite        String?   // Personal website URL
  
  // Professional Information
  currentJobTitle        String?   // Current job title
  currentCompany         String?   // Current company
  workExperience         String?   // Work experience details
  skills                 String?   // Skills (comma-separated)
  achievements           String?   // Notable achievements
  
  // Additional Information
  bio                    String?   // Personal bio
  interests              String?   // Interests and hobbies
  mentorshipAvailable    Boolean   @default(false) // Available for mentoring
  lookingForMentor       Boolean   @default(false) // Looking for a mentor
  
  // Location Information
  currentCity            String?   // Current city
  currentCountry         String?   // Current country
  latitude               Float?    // Latitude for Alumni Globe
  longitude              Float?    // Longitude for Alumni Globe
  locationVisibility     String?   @default("public") // public, alumni_only, private

  // Legacy fields for compatibility
  firstName              String?   // First name
  lastName               String?   // Last name
  street                 String?   // Legacy street address
  city                   String?   // Legacy city
  state                  String?   // Legacy state
  pincode                String?   // Legacy PIN code
  country                String?   // Legacy country
  countryCode            String?   // Phone country code
  address                String?   // Legacy address field
  socialMediaWebsite     String?   // Legacy social media field
  
  // Academic Information
  yearOfJoining          Int
  passingYear            Int
  admissionInFirstYear   Boolean   @default(true)
  department             String
  college                String
  course                 String
  enrollmentToYear       Int?      // optional

  role                   Role      @default(ALUMNI)
  isVerified             Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  otps                   OTP[]
  maintenanceEnabled     MaintenanceMode[] @relation("EnabledBy")
  newsArticles           NewsArticle[] @relation("Author")
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  type      String   // 'EMAIL' or 'PHONE'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  alumniId  Int
  alumni    Alumni   @relation(fields: [alumniId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model MaintenanceMode {
  id          Int       @id @default(autoincrement())
  isEnabled   Boolean   @default(false)
  message     String?
  enabledBy   Int?
  enabledAt   DateTime?
  disabledAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  enabledByUser Alumni? @relation("EnabledBy", fields: [enabledBy], references: [id], onDelete: SetNull)
}

model NewsArticle {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  excerpt     String?
  imageUrl    String?
  category    String    @default("general")
  tags        String[]
  isPublished Boolean   @default(false)
  isPinned    Boolean   @default(false)
  authorId    Int
  author      Alumni    @relation("Author", fields: [authorId], references: [id], onDelete: Restrict)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([category])
  @@index([publishedAt])
  @@index([isPublished])
}