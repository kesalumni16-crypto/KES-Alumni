// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  ALUMNI
}

model Alumni {
  id                     Int       @id @default(autoincrement())
  firstName              String    // First name
  middleName             String?   // Middle name (optional)
  lastName               String    // Last name
  username               String?   // Auto-generated username for display
  dateOfBirth            DateTime? // optional
  email                  String    @unique
  phoneNumber            String    @unique
  whatsappNumber         String?   // WhatsApp number
  secondaryPhoneNumber   String?   // Second phone number
  password               String?
  
  // Personal Information
  gender                 String?   // male, female, other, prefer_not_to_say
  profilePhoto           String?   // URL to profile photo
  
  // Address Information - Personal
  personalAddressLine1   String?   // Personal address line 1
  personalAddressLine2   String?   // Personal address line 2 (optional)
  personalCity           String?   // Personal city
  personalState          String?   // Personal state
  personalPostalCode     String?   // Personal postal/ZIP code
  personalCountry        String?   // Personal country
  
  // Address Information - Company/Work
  companyAddressLine1    String?   // Company address line 1
  companyAddressLine2    String?   // Company address line 2 (optional)
  companyCity            String?   // Company city
  companyState           String?   // Company state
  companyPostalCode      String?   // Company postal/ZIP code
  companyCountry         String?   // Company country
  
  // Social Media Information
  linkedinProfile        String?   // LinkedIn URL
  instagramProfile       String?   // Instagram URL
  twitterProfile         String?   // Twitter/X URL
  facebookProfile        String?   // Facebook URL
  githubProfile          String?   // GitHub URL
  personalWebsite        String?   // Personal website URL
  
  // Professional Information
  currentJobTitle        String?   // Current job title
  currentCompany         String?   // Current company
  workExperience         String?   // Work experience details
  skills                 String?   // Skills (comma-separated)
  achievements           String?   // Notable achievements
  
  // Additional Information
  bio                    String?   // Personal bio
  interests              String?   // Interests and hobbies
  mentorshipAvailable    Boolean   @default(false) // Available for mentoring
  lookingForMentor       Boolean   @default(false) // Looking for a mentor
  
  // Location Information
  currentCity            String?   // Current city
  currentCountry         String?   // Current country

  // Education Records
  education              Education[] // Multiple education records

  // Legacy fields for compatibility
  fullName               String?   // Legacy full name (computed)
  currentName            String?   // Legacy current name
  street                 String?   // Legacy street address
  city                   String?   // Legacy city
  state                  String?   // Legacy state
  pincode                String?   // Legacy PIN code
  country                String?   // Legacy country
  countryCode            String?   // Phone country code
  address                String?   // Legacy address field
  socialMediaWebsite     String?   // Legacy social media field
  personalStreet         String?   // Legacy personal street
  personalPincode        String?   // Legacy personal pincode
  companyStreet          String?   // Legacy company street
  companyPincode         String?   // Legacy company pincode
  
  // Academic Information
  yearOfJoining          Int
  passingYear            Int
  admissionInFirstYear   Boolean   @default(true)
  department             String
  college                String
  course                 String
  enrollmentToYear       Int?      // optional

  role                   Role      @default(ALUMNI)
  isVerified             Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  otps                   OTP[]
  maintenanceEnabled     MaintenanceMode[] @relation("EnabledBy")
}

model Education {
  id                  Int      @id @default(autoincrement())
  alumniId            Int
  institutionName     String   // College/University name
  degree              String   // Degree type (B.Tech, M.Tech, MBA, etc.)
  fieldOfStudy        String   // Major/Department
  startYear           Int      // Year started
  endYear             Int?     // Year completed (null if currently studying)
  isCurrentlyStudying Boolean  @default(false)
  grade               String?  // GPA/Grade/Percentage
  description         String?  // Additional description
  activities          String?  // Extracurricular activities
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  alumni              Alumni   @relation(fields: [alumniId], references: [id], onDelete: Cascade)

  @@index([alumniId])
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  type      String   // 'EMAIL' or 'PHONE'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  alumniId  Int
  alumni    Alumni   @relation(fields: [alumniId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model MaintenanceMode {
  id          Int       @id @default(autoincrement())
  isEnabled   Boolean   @default(false)
  message     String?
  enabledBy   Int?
  enabledAt   DateTime?
  disabledAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  enabledByUser Alumni? @relation("EnabledBy", fields: [enabledBy], references: [id], onDelete: SetNull)
}